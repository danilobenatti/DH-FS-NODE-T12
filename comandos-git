git init // cria o repositório local na pasta onde estão os arquivos.
git config user.name "nomeUsuario" // define o usuário
git config user.email "emailUsuario" // define o email do usuário

// define de forma global usuário e email para demais projetos
// contidos no mesmo local (DESKTOP).
git config --global user.name "nomeUsuario"
git config --global user.email "emailUsuario"

git remote add origin https://... // aponta para o repositório remoto.
git remote add origin https://github.com/danilobenatti/DH-FS-NODE-T12.git
git remote -v // verifica se o apontamento para o repositório está correto.
// origin  https://github.com/danilobenatti/DH-FS-NODE-T12.git (fetch) -> de onde virá os arquivos.
// origin  https://github.com/danilobenatti/DH-FS-NODE-T12.git (push) -> para onde enviar os arquivos.

git status // status em relação ao repositório
git add nomearquivo.js
git add . // adiciona os arquivos ou as modificações
git commit -m "mensagem" // commita(salva) as modificações feitas
git push origin master // envia as modificaçõesao repositório remoto

git status
git clone https://github.com/danilobenatti/***. // clona o projeto do repositório para 
// o local desejado, quando for pela primeira vez.
// o comando clone é executado apenas uma vez. Apenas quando se que baixar os arquivos no github e
// eles não estão presentes no computador local
// se os arquivos estão presentes e a intenção for atualizar, ai o comando é outro.
git pull origin master // irá realizar o download dos arquivos e atualizar os arquivos locais
// apenas dos que foram adicionados ou modificados.
// basicamente o "git pull" trás do repositório os arquivos atualizados.


// ------------------------------
git status
// verificar o log para saber se exite arquivos novos.
git add .
// adiciona todos os arquivos para serem adicionados/atualizados.
git commit -m "Mensagem de informação"
// comitar/"salva" os arquivos
git push origin master
// efetiva/"oficializa" a operação de enviar os arquivos.

// ------------------------------
// Criando Branches
// Para uma branch de nome "bugfix45"
git branch bugfix45
// Para começar utilizar a branch "bugfix45"
git checkout bugfix45
// Para criar uma branch de nome "bugfix45" e passar a utilizá-la
// com um só comando.
git checkout -b bugfix45
// Para listar todas as branches de um repositório "local" execute
git branch
// Para listar todas as branches "locais" e "remotas" execute
git branches -a

// ------------------------------
// Podemos listar o histórico de commit's
// Exibe todos os commit's
git log